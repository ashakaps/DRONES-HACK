services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      # подставь свои значения по необходимости
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-droneradar}
      JWT_SECRET: ${JWT_SECRET:-change-me}
      ACCESS_TOKEN_EXPIRES_MIN: "60"
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-droneradar}
    volumes:
      - backend_data:/data
    expose:
      - "8000"   # внутри сети compose
    depends_on:
      - db
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    depends_on:
      - backend
    ports:
      - "8087:8080"  # ← один внешний порт
    restart: unless-stopped

  db:
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-droneradar}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-droneradar}"]
      interval: 5s
      timeout: 3s
      retries: 20
    ports:
      - "${DB_PORT_EXTERNAL:-5432}:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data

volumes:
  dbdata:
  backend_data:
